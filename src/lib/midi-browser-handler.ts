import { Pitch } from './types';

/**
 * Opens MIDI output port and sends MIDI messages to it.
 **/
export class MidiBrowserHandler {
    private midi: WebMidi.MIDIAccess;

    /**
     * Gains access to MIDI input and output ports.
     * 
     * @returns A promise containing the WebMidi object if access successful.
     **/
    openAccess() {
        return new Promise<WebMidi.MIDIAccess>((resolve, reject) => {
            navigator.requestMIDIAccess().then((midi) => {
                this.midi = midi;
                resolve(midi);
            }, (err) => {
                console.log(`Failed to get MIDI access - ${err}`);
                reject(err);
            });
        });
    }

    /**
     * Sends MIDI on output port, which can be subsequently picked up by a component listening to input.
     * 
     * @param pitch MIDI pitch, valid from 22 to 106.
     * @param duration The time in miliseconds that should elapse before a STOP message is sent to end the frequency generated by this message.
     **/
    dispatchMidiMessage(pitch: Pitch | number, duration: number) {
        this.midi.outputs.forEach((output) => {
            output.send([ 0x90, pitch, 0x7f ]);
            window.setTimeout(() => output.send([ 0x80, pitch, 0x7f ]), duration);
        });
    }
}